// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: purge.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PurgeServiceClient is the client API for PurgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurgeServiceClient interface {
	Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error)
}

type purgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurgeServiceClient(cc grpc.ClientConnInterface) PurgeServiceClient {
	return &purgeServiceClient{cc}
}

func (c *purgeServiceClient) Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	err := c.cc.Invoke(ctx, "/mixer.PurgeService/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurgeServiceServer is the server API for PurgeService service.
// All implementations must embed UnimplementedPurgeServiceServer
// for forward compatibility
type PurgeServiceServer interface {
	Purge(context.Context, *PurgeRequest) (*PurgeResponse, error)
	mustEmbedUnimplementedPurgeServiceServer()
}

// UnimplementedPurgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPurgeServiceServer struct {
}

func (UnimplementedPurgeServiceServer) Purge(context.Context, *PurgeRequest) (*PurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedPurgeServiceServer) mustEmbedUnimplementedPurgeServiceServer() {}

// UnsafePurgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurgeServiceServer will
// result in compilation errors.
type UnsafePurgeServiceServer interface {
	mustEmbedUnimplementedPurgeServiceServer()
}

func RegisterPurgeServiceServer(s grpc.ServiceRegistrar, srv PurgeServiceServer) {
	s.RegisterService(&PurgeService_ServiceDesc, srv)
}

func _PurgeService_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurgeServiceServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixer.PurgeService/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurgeServiceServer).Purge(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurgeService_ServiceDesc is the grpc.ServiceDesc for PurgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mixer.PurgeService",
	HandlerType: (*PurgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Purge",
			Handler:    _PurgeService_Purge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purge.proto",
}
