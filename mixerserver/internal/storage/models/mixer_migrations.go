// Code generated by BobGen psql v0.15.6. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
)

// MixerMigration is an object representing the database table.
type MixerMigration struct {
	Version int64 `db:"version,pk" json:"version" toml:"version" yaml:"version"`
	Dirty   bool  `db:"dirty" json:"dirty" toml:"dirty" yaml:"dirty"`
}

// MixerMigrationSlice is an alias for a slice of pointers to MixerMigration.
// This should almost always be used instead of []MixerMigration.
type MixerMigrationSlice []*MixerMigration

// MixerMigrationsTable contains methods to work with the mixer_migrations table
var MixerMigrationsTable = psql.NewTablex[*MixerMigration, MixerMigrationSlice, *MixerMigrationSetter]("", "mixer_migrations")

// MixerMigrationsQuery is a query on the mixer_migrations table
type MixerMigrationsQuery = *psql.TableQuery[*MixerMigration, MixerMigrationSlice, *MixerMigrationSetter]

// MixerMigrationsStmt is a prepared statment on mixer_migrations
type MixerMigrationsStmt = bob.QueryStmt[*MixerMigration, MixerMigrationSlice]

// MixerMigrationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type MixerMigrationSetter struct {
	Version omit.Val[int64] `db:"version,pk"`
	Dirty   omit.Val[bool]  `db:"dirty"`
}

type mixerMigrationColumnNames struct {
	Version string
	Dirty   string
}

var MixerMigrationColumns = struct {
	Version psql.Expression
	Dirty   psql.Expression
}{
	Version: psql.Quote("mixer_migrations", "version"),
	Dirty:   psql.Quote("mixer_migrations", "dirty"),
}

type mixerMigrationWhere[Q psql.Filterable] struct {
	Version psql.WhereMod[Q, int64]
	Dirty   psql.WhereMod[Q, bool]
}

func MixerMigrationWhere[Q psql.Filterable]() mixerMigrationWhere[Q] {
	return mixerMigrationWhere[Q]{
		Version: psql.Where[Q, int64](psql.Quote("mixer_migrations", "version")),
		Dirty:   psql.Where[Q, bool](psql.Quote("mixer_migrations", "dirty")),
	}
}

// MixerMigrations begins a query on mixer_migrations
func MixerMigrations(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MixerMigrationsQuery {
	return MixerMigrationsTable.Query(ctx, exec, mods...)
}

// FindMixerMigration retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindMixerMigration(ctx context.Context, exec bob.Executor, VersionPK int64, cols ...string) (*MixerMigration, error) {
	if len(cols) == 0 {
		return MixerMigrationsTable.Query(
			ctx, exec,
			SelectWhere.MixerMigrations.Version.EQ(VersionPK),
		).One()
	}

	return MixerMigrationsTable.Query(
		ctx, exec,
		SelectWhere.MixerMigrations.Version.EQ(VersionPK),
		sm.Columns(MixerMigrationsTable.Columns().Only(cols...)),
	).One()
}

// MixerMigrationExists checks the presence of a single record by primary key
func MixerMigrationExists(ctx context.Context, exec bob.Executor, VersionPK int64) (bool, error) {
	return MixerMigrationsTable.Query(
		ctx, exec,
		SelectWhere.MixerMigrations.Version.EQ(VersionPK),
	).Exists()
}

// Update uses an executor to update the MixerMigration
func (o *MixerMigration) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := MixerMigrationsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single MixerMigration record with an executor
func (o *MixerMigration) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return MixerMigrationsTable.Delete(ctx, exec, o)
}

// Reload refreshes the MixerMigration using the executor
func (o *MixerMigration) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := MixerMigrationsTable.Query(
		ctx, exec,
		SelectWhere.MixerMigrations.Version.EQ(o.Version),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o MixerMigrationSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return MixerMigrationsTable.DeleteMany(ctx, exec, o...)
}

func (o MixerMigrationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals MixerMigrationSetter) (int64, error) {
	rowsAff, err := MixerMigrationsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o MixerMigrationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	VersionPK := make([]any, len(o))
	for i, o := range o {
		VersionPK[i] = o.Version
	}
	mods = append(mods, sm.Where(MixerMigrationColumns.Version.In(VersionPK...)))

	o2, err := MixerMigrations(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Version != old.Version {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
