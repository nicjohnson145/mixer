// Code generated by BobGen psql v0.15.6. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "github.com/nicjohnson145/mixer/mixerserver/internal/storage/models"
)

type DrinkMod interface {
	Apply(*DrinkTemplate)
}

type DrinkModFunc func(*DrinkTemplate)

func (f DrinkModFunc) Apply(n *DrinkTemplate) {
	f(n)
}

type DrinkModSlice []DrinkMod

func (mods DrinkModSlice) Apply(n *DrinkTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// DrinkTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type DrinkTemplate struct {
	ID               func() int
	Name             func() string
	Username         func() string
	PrimaryAlcohol   func() string
	PreferredGlass   func() null.Val[string]
	Ingredients      func() string
	Instructions     func() null.Val[string]
	Notes            func() null.Val[string]
	Publicity        func() int
	UnderDevelopment func() bool
	Tags             func() null.Val[string]
	Favorite         func() bool
	r                drinkR
	f                *factory
}

type drinkR struct {
	UsernameUsr *drinkUsernameUsrR
}

type drinkUsernameUsrR struct {
	o *UsrTemplate
}

// Apply mods to the DrinkTemplate
func (o *DrinkTemplate) Apply(mods ...DrinkMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Drink
// this does nothing with the relationship templates
func (o DrinkTemplate) toModel() *models.Drink {
	m := &models.Drink{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.PrimaryAlcohol != nil {
		m.PrimaryAlcohol = o.PrimaryAlcohol()
	}
	if o.PreferredGlass != nil {
		m.PreferredGlass = o.PreferredGlass()
	}
	if o.Ingredients != nil {
		m.Ingredients = o.Ingredients()
	}
	if o.Instructions != nil {
		m.Instructions = o.Instructions()
	}
	if o.Notes != nil {
		m.Notes = o.Notes()
	}
	if o.Publicity != nil {
		m.Publicity = o.Publicity()
	}
	if o.UnderDevelopment != nil {
		m.UnderDevelopment = o.UnderDevelopment()
	}
	if o.Tags != nil {
		m.Tags = o.Tags()
	}
	if o.Favorite != nil {
		m.Favorite = o.Favorite()
	}

	return m
}

// toModels returns an models.DrinkSlice
// this does nothing with the relationship templates
func (o DrinkTemplate) toModels(number int) models.DrinkSlice {
	m := make(models.DrinkSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Drink
// according to the relationships in the template. Nothing is inserted into the db
func (t DrinkTemplate) setModelRels(o *models.Drink) {
	if t.r.UsernameUsr != nil {
		rel := t.r.UsernameUsr.o.toModel()
		rel.R.UsernameDrinks = append(rel.R.UsernameDrinks, o)
		o.Username = rel.Username
		o.R.UsernameUsr = rel
	}

}

// Build returns an *models.Drink
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DrinkTemplate.Create
func (o DrinkTemplate) Build() *models.Drink {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.DrinkSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DrinkTemplate.CreateMany
func (o DrinkTemplate) BuildMany(number int) models.DrinkSlice {
	m := make(models.DrinkSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// Drink has methods that act as mods for the DrinkTemplate
var DrinkMods drinkMods

type drinkMods struct{}

func (m drinkMods) RandomizeAllColumns(f *faker.Faker) DrinkMod {
	return DrinkModSlice{
		DrinkMods.RandomID(f),
		DrinkMods.RandomName(f),
		DrinkMods.RandomUsername(f),
		DrinkMods.RandomPrimaryAlcohol(f),
		DrinkMods.RandomPreferredGlass(f),
		DrinkMods.RandomIngredients(f),
		DrinkMods.RandomInstructions(f),
		DrinkMods.RandomNotes(f),
		DrinkMods.RandomPublicity(f),
		DrinkMods.RandomUnderDevelopment(f),
		DrinkMods.RandomTags(f),
		DrinkMods.RandomFavorite(f),
	}
}

// Set the model columns to this value
func (m drinkMods) ID(val int) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.ID = func() int { return val }
	})
}

// Set the Column from the function
func (m drinkMods) IDFunc(f func() int) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetID() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomID(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.ID = func() int {
			return random[int](f)
		}
	})
}

func (m drinkMods) ensureID(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int {
			return random[int](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Name(val string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m drinkMods) NameFunc(f func() string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetName() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomName(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m drinkMods) ensureName(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Username(val string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m drinkMods) UsernameFunc(f func() string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetUsername() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomUsername(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Username = func() string {
			return random[string](f)
		}
	})
}

func (m drinkMods) ensureUsername(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Username != nil {
			return
		}

		o.Username = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) PrimaryAlcohol(val string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PrimaryAlcohol = func() string { return val }
	})
}

// Set the Column from the function
func (m drinkMods) PrimaryAlcoholFunc(f func() string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PrimaryAlcohol = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetPrimaryAlcohol() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PrimaryAlcohol = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomPrimaryAlcohol(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PrimaryAlcohol = func() string {
			return random[string](f)
		}
	})
}

func (m drinkMods) ensurePrimaryAlcohol(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.PrimaryAlcohol != nil {
			return
		}

		o.PrimaryAlcohol = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) PreferredGlass(val null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PreferredGlass = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m drinkMods) PreferredGlassFunc(f func() null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PreferredGlass = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetPreferredGlass() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PreferredGlass = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomPreferredGlass(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.PreferredGlass = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m drinkMods) ensurePreferredGlass(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.PreferredGlass != nil {
			return
		}

		o.PreferredGlass = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Ingredients(val string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Ingredients = func() string { return val }
	})
}

// Set the Column from the function
func (m drinkMods) IngredientsFunc(f func() string) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Ingredients = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetIngredients() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Ingredients = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomIngredients(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Ingredients = func() string {
			return random[string](f)
		}
	})
}

func (m drinkMods) ensureIngredients(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Ingredients != nil {
			return
		}

		o.Ingredients = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Instructions(val null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Instructions = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m drinkMods) InstructionsFunc(f func() null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Instructions = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetInstructions() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Instructions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomInstructions(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Instructions = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m drinkMods) ensureInstructions(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Instructions != nil {
			return
		}

		o.Instructions = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Notes(val null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Notes = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m drinkMods) NotesFunc(f func() null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Notes = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetNotes() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Notes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomNotes(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Notes = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m drinkMods) ensureNotes(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Notes != nil {
			return
		}

		o.Notes = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Publicity(val int) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Publicity = func() int { return val }
	})
}

// Set the Column from the function
func (m drinkMods) PublicityFunc(f func() int) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Publicity = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetPublicity() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Publicity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomPublicity(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Publicity = func() int {
			return random[int](f)
		}
	})
}

func (m drinkMods) ensurePublicity(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Publicity != nil {
			return
		}

		o.Publicity = func() int {
			return random[int](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) UnderDevelopment(val bool) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.UnderDevelopment = func() bool { return val }
	})
}

// Set the Column from the function
func (m drinkMods) UnderDevelopmentFunc(f func() bool) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.UnderDevelopment = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetUnderDevelopment() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.UnderDevelopment = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomUnderDevelopment(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.UnderDevelopment = func() bool {
			return random[bool](f)
		}
	})
}

func (m drinkMods) ensureUnderDevelopment(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.UnderDevelopment != nil {
			return
		}

		o.UnderDevelopment = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Tags(val null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Tags = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m drinkMods) TagsFunc(f func() null.Val[string]) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Tags = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetTags() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Tags = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomTags(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Tags = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m drinkMods) ensureTags(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Tags != nil {
			return
		}

		o.Tags = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m drinkMods) Favorite(val bool) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Favorite = func() bool { return val }
	})
}

// Set the Column from the function
func (m drinkMods) FavoriteFunc(f func() bool) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Favorite = f
	})
}

// Clear any values for the column
func (m drinkMods) UnsetFavorite() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Favorite = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkMods) RandomFavorite(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.Favorite = func() bool {
			return random[bool](f)
		}
	})
}

func (m drinkMods) ensureFavorite(f *faker.Faker) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		if o.Favorite != nil {
			return
		}

		o.Favorite = func() bool {
			return random[bool](f)
		}
	})
}

func (m drinkMods) WithUsernameUsr(rel *UsrTemplate) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.r.UsernameUsr = &drinkUsernameUsrR{
			o: rel,
		}
	})
}

func (m drinkMods) WithNewUsernameUsr(mods ...UsrMod) DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {

		related := o.f.NewUsr(mods...)

		m.WithUsernameUsr(related).Apply(o)
	})
}

func (m drinkMods) WithoutUsernameUsr() DrinkMod {
	return DrinkModFunc(func(o *DrinkTemplate) {
		o.r.UsernameUsr = nil
	})
}
