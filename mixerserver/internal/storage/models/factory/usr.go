// Code generated by BobGen psql v0.15.6. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	models "github.com/nicjohnson145/mixer/mixerserver/internal/storage/models"
	"github.com/stephenafamo/bob"
)

type UsrMod interface {
	Apply(*UsrTemplate)
}

type UsrModFunc func(*UsrTemplate)

func (f UsrModFunc) Apply(n *UsrTemplate) {
	f(n)
}

type UsrModSlice []UsrMod

func (mods UsrModSlice) Apply(n *UsrTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UsrTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UsrTemplate struct {
	Username func() string
	Password func() string
	r        usrR
	f        *factory
}

type usrR struct {
	UsernameDrinks      []*usrUsernameDrinksR
	UsernameUsrSettings []*usrUsernameUsrSettingsR
}

type usrUsernameDrinksR struct {
	number int
	o      *DrinkTemplate
}
type usrUsernameUsrSettingsR struct {
	number int
	o      *UsrSettingTemplate
}

// Apply mods to the UsrTemplate
func (o *UsrTemplate) Apply(mods ...UsrMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Usr
// this does nothing with the relationship templates
func (o UsrTemplate) toModel() *models.Usr {
	m := &models.Usr{}

	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}

	return m
}

// toModels returns an models.UsrSlice
// this does nothing with the relationship templates
func (o UsrTemplate) toModels(number int) models.UsrSlice {
	m := make(models.UsrSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Usr
// according to the relationships in the template. Nothing is inserted into the db
func (t UsrTemplate) setModelRels(o *models.Usr) {
	if t.r.UsernameDrinks != nil {
		rel := models.DrinkSlice{}
		for _, r := range t.r.UsernameDrinks {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.Username = o.Username
				rel.R.UsernameUsr = o
			}
			rel = append(rel, related...)
		}
		o.R.UsernameDrinks = rel
	}

	if t.r.UsernameUsrSettings != nil {
		rel := models.UsrSettingSlice{}
		for _, r := range t.r.UsernameUsrSettings {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.Username = o.Username
				rel.R.UsernameUsr = o
			}
			rel = append(rel, related...)
		}
		o.R.UsernameUsrSettings = rel
	}

}

// BuildSetter returns an *models.UsrSetter
// this does nothing with the relationship templates
func (o UsrTemplate) BuildSetter() *models.UsrSetter {
	m := &models.UsrSetter{}

	if o.Username != nil {
		m.Username = omit.From(o.Username())
	}
	if o.Password != nil {
		m.Password = omit.From(o.Password())
	}

	return m
}

// BuildManySetter returns an []*models.UsrSetter
// this does nothing with the relationship templates
func (o UsrTemplate) BuildManySetter(number int) []*models.UsrSetter {
	m := make([]*models.UsrSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Usr
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UsrTemplate.Create
func (o UsrTemplate) Build() *models.Usr {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UsrSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UsrTemplate.CreateMany
func (o UsrTemplate) BuildMany(number int) models.UsrSlice {
	m := make(models.UsrSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUsr(m *models.UsrSetter) {
	if m.Username.IsUnset() {
		m.Username = omit.From(random[string](nil))
	}
	if m.Password.IsUnset() {
		m.Password = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Usr
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UsrTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Usr) (context.Context, error) {
	var err error

	if o.r.UsernameDrinks != nil {
		for _, r := range o.r.UsernameDrinks {
			var rel0 models.DrinkSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUsernameDrinks(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.UsernameUsrSettings != nil {
		for _, r := range o.r.UsernameUsrSettings {
			var rel1 models.UsrSettingSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUsernameUsrSettings(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a usr and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UsrTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Usr, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a usr and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UsrTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Usr, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUsr(opt)

	m, err := models.UsrsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = usrCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple usrs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UsrTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UsrSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple usrs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UsrTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UsrSlice, error) {
	var err error
	m := make(models.UsrSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Usr has methods that act as mods for the UsrTemplate
var UsrMods usrMods

type usrMods struct{}

func (m usrMods) RandomizeAllColumns(f *faker.Faker) UsrMod {
	return UsrModSlice{
		UsrMods.RandomUsername(f),
		UsrMods.RandomPassword(f),
	}
}

// Set the model columns to this value
func (m usrMods) Username(val string) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m usrMods) UsernameFunc(f func() string) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m usrMods) UnsetUsername() UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m usrMods) RandomUsername(f *faker.Faker) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Username = func() string {
			return random[string](f)
		}
	})
}

func (m usrMods) ensureUsername(f *faker.Faker) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		if o.Username != nil {
			return
		}

		o.Username = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m usrMods) Password(val string) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Password = func() string { return val }
	})
}

// Set the Column from the function
func (m usrMods) PasswordFunc(f func() string) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m usrMods) UnsetPassword() UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m usrMods) RandomPassword(f *faker.Faker) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.Password = func() string {
			return random[string](f)
		}
	})
}

func (m usrMods) ensurePassword(f *faker.Faker) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		if o.Password != nil {
			return
		}

		o.Password = func() string {
			return random[string](f)
		}
	})
}

func (m usrMods) WithUsernameDrinks(number int, related *DrinkTemplate) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.r.UsernameDrinks = []*usrUsernameDrinksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m usrMods) WithNewUsernameDrinks(number int, mods ...DrinkMod) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {

		related := o.f.NewDrink(mods...)
		m.WithUsernameDrinks(number, related).Apply(o)
	})
}

func (m usrMods) AddUsernameDrinks(number int, related *DrinkTemplate) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.r.UsernameDrinks = append(o.r.UsernameDrinks, &usrUsernameDrinksR{
			number: number,
			o:      related,
		})
	})
}

func (m usrMods) AddNewUsernameDrinks(number int, mods ...DrinkMod) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {

		related := o.f.NewDrink(mods...)
		m.AddUsernameDrinks(number, related).Apply(o)
	})
}

func (m usrMods) WithoutUsernameDrinks() UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.r.UsernameDrinks = nil
	})
}

func (m usrMods) WithUsernameUsrSettings(number int, related *UsrSettingTemplate) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.r.UsernameUsrSettings = []*usrUsernameUsrSettingsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m usrMods) WithNewUsernameUsrSettings(number int, mods ...UsrSettingMod) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {

		related := o.f.NewUsrSetting(mods...)
		m.WithUsernameUsrSettings(number, related).Apply(o)
	})
}

func (m usrMods) AddUsernameUsrSettings(number int, related *UsrSettingTemplate) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.r.UsernameUsrSettings = append(o.r.UsernameUsrSettings, &usrUsernameUsrSettingsR{
			number: number,
			o:      related,
		})
	})
}

func (m usrMods) AddNewUsernameUsrSettings(number int, mods ...UsrSettingMod) UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {

		related := o.f.NewUsrSetting(mods...)
		m.AddUsernameUsrSettings(number, related).Apply(o)
	})
}

func (m usrMods) WithoutUsernameUsrSettings() UsrMod {
	return UsrModFunc(func(o *UsrTemplate) {
		o.r.UsernameUsrSettings = nil
	})
}
