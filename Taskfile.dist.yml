version: '3'

vars:
  SIGNING_KEY:
    sh: "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 35"

tasks:
  gen-signing-key:
    desc: generate a random signingkey
    cmds:
    - echo -n "{{ .SIGNING_KEY }}"

  gen-go-protos:
    desc: generate go protobuf bits
    vars:
      OUTPUT: mixerserver/protos/
    cmds:
    - >
      protoc
      -I./protos/
      --go_out={{ .OUTPUT }}
      --go_opt=paths=source_relative
      --go-grpc_out={{ .OUTPUT }}
      --go-grpc_opt=paths=source_relative
      --grpc-gateway_out={{ .OUTPUT }}
      --grpc-gateway_opt=paths=source_relative
      --grpc-gateway_opt=logtostderr=true
      protos/*.proto

  gen-dart-protos:
    desc: generate dart protobuf bits
    cmds:
    - protoc -I./protos/ --dart_out=mixer/lib/protos protos/*.proto

  go-generation:
    desc: golang code generation that's not protobuf/DB related
    dir: mixerserver
    cmds:
    - go generate ./...

  protos:
    desc: generate protobuf bits
    cmds:
    - task: gen-go-protos
    - task: gen-dart-protos

  make-migration:
    desc: create a DB migration, requires name as argument
    dir: mixerserver/internal/storage/migrations
    cmds:
    - migrate create -ext sql {{ .CLI_ARGS }}

  build-server-binary:
    desc: build the mixerserver binary locally
    dir: mixerserver
    cmds:
    - go build -o mixerserver

  compose-supporting:
    desc: start up supporting docker compose infrastructure
    dir: mixerserver
    cmds:
    - docker-compose up -d --wait postgres

  compose-down:
    desc: bring down compose stack
    dir: mixerserver
    cmds:
    - docker-compose down --volumes

  migrate:
    desc: execute migrations against a running postgres
    dir: mixerserver
    cmds:
    - task: build-server-binary
    - ./mixerserver migrate

  psql:
    desc: psql to running postgres
    cmds:
    - PGPASSWORD=mixer_pass psql -h localhost -U mixer_usr mixer

  local:
    desc: run mixer locally
    dir: mixerserver
    env:
      JWT_SIGNINGKEY: $JWT_SIGNINGKEY
      PROTECTREGISTER: "false"
    cmds:
    - task: build-server-binary
    - echo "using signing key $JWT_SIGNINGKEY"
    - ./mixerserver

  clean-db:
    desc: wipe DB data
    cmds:
    - task: run-sql
      vars:
        SQL_FILE: ./mixerserver/hack/cleanup-functional-test.sql

  run-sql:
    internal: true
    cmds:
    - PGPASSWORD=mixer_pass psql -h localhost -U mixer_usr mixer -f {{ .SQL_FILE }}

  gen-superuser-jwt:
    desc: generate a superuser JWT
    preconditions:
    - sh: '[ -n "$JWT_SIGNINGKEY" ]'
      message: "JWT_SIGNINGKEY must be set"
    env:
      JWT_SIGNINGKEY: $JWT_SIGNINGKEY
    cmds:
    - ./mixerserver/hack/gen-jwt.sh

  poke-tests:
    desc: run functional tests locally with poke
    preconditions:
    - sh: '[ -n "$SUPERUSER_JWT" ]'
      message: "SUPERUSER_JWT must be set"
    env:
      SUPERUSER_JWT: $SUPERUSER_JWT
    cmds:
    - task: clean-db
    - poke mixerserver/poke_tests/register_users.yaml
    - poke mixerserver/poke_tests/drink_crud.yaml
